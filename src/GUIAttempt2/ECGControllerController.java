/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUIAttempt2;

import ECGroups.SpecCheck;
import ECCToolBox.Globals;
import ECCToolBox.Utilities;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.AttributedString;
import javax.swing.JComponent;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author ben
 */
public class ECGControllerController implements ActionListener, ChangeListener{
    private ECGModel mod;
    private ECGControllerView view;

    /**
     *
     * @param mod
     * @param view
     */
    public ECGControllerController(ECGModel mod, ECGControllerView view) {
        this.mod = mod;
        this.view = view;
    }
    
    
    
    /**
     * Listens for actionevents generated by the text fields
     *
     * does not yet validate the values, and will allow them to be out of
     * bounds.
     *
     * @param e
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        String source = ((JComponent) e.getSource()).getName();
        //Globals.print(""+"action performed! name of source is " + source);
        if (source.equals("textA")) {
            view.getSliderA().setValue(Integer.parseInt(view.getTextA().getText()));
            view.setECGText( 
                    SpecCheck.getParamExplanation(
                       view.getSliderA().getValue(),
                       view.getSliderB().getValue(),
                       Globals.getPrimeAt(view.getSliderP().getValue()))
                    );
        }
        if (source.equals("textB")) {
            view.getSliderB().setValue(Integer.parseInt(view.getTextB().getText()));
            view.setECGText( 
                    SpecCheck.getParamExplanation(
                       view.getSliderA().getValue(),
                       view.getSliderB().getValue(),
                       Globals.getPrimeAt(view.getSliderP().getValue()))
                    );

        }
        
        if (source.equals("textP")) {
            //view.getSliderP.setValue((int) textP.getValue());
            
            //Globals.print(""+" p is set to " + view.getSliderP.getValue());
        }

        if (source.equals("buttonA")) {
//            Utilities.print("buttonA pressed");
            mod.updateNoChange(
                    view.getSliderA().getValue(), 
                    view.getSliderB().getValue(), 
                    view.getSliderP().getValue()); 
            mod.updateECGAndNotify();
        }
        if (source.equals("buttonB")) {
//            mod.clearSelectedPoints();
//            System.err.println("7*p="+mod.solveDLP(mod.getPointAt(15), mod.scalarMultiply(mod.getPointAt(15), 23)));
//            Utilities.print("button b pressed");
        }
        if (source.equals("buttonP")) {
//            Utilities.print("Button p presseds");
        }
    }

    /**
     * this currently just automatically updates the texts to the values of the
     * sliders...
     *
     * @param e
     */
    @Override
    public void stateChanged(ChangeEvent e) {
        view.getTextP().setValue(Globals.getPrimeAt(view.getSliderP().getValue()));
        /*
         * this restricts A and B to be less than P, -P
         */
        view.getSliderA().setMaximum(Globals.getPrimeAt(view.getSliderP().getValue())-1);
        view.getSliderA().setMinimum((-1)*Globals.getPrimeAt(view.getSliderP().getValue())+1);
        view.getSliderB().setMaximum(Globals.getPrimeAt(view.getSliderP().getValue())-1);
        view.getSliderB().setMinimum((-1)*Globals.getPrimeAt(view.getSliderP().getValue())+1);
        
        view.getTextA().setValue(view.getSliderA().getValue());
        view.getTextB().setValue(view.getSliderB().getValue());
        
        view.setECGText( 
                    SpecCheck.getParamExplanation(
                       view.getSliderA().getValue(),
                       view.getSliderB().getValue(),
                       Globals.getPrimeAt(view.getSliderP().getValue()))
                    );        
    }
}
